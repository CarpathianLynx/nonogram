{"version":3,"sources":["types/FillOption.ts","components/X.tsx","components/O.tsx","components/classes.ts","components/FillPicker.tsx","redux/currentGame/actions.ts","components/FillPickerContainer.ts","components/ConstraintsWidget.tsx","components/WithExtraClasses.tsx","components/RowConstraintsContainer.ts","components/ColConstraintsContainer.ts","components/GridWidget.tsx","puzzles/common.ts","redux/currentGame/thunks.ts","components/GridContainer.ts","components/GameWidget.tsx","types/Constraint.ts","redux/currentGame/reducer.ts","types/Cell.ts","redux/store.ts","puzzles/colors.ts","puzzles/september26.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EMPTY","EMPTY_OPTION","value","completed","X","size","padding","xmlns","viewBox","stroke","strokeWidth","strokeLinecap","x1","y1","x2","y2","O","cx","cy","r","fill","classes","args","arg","undefined","push","cls","Object","entries","filter","map","key","join","FillPickerOption","option","active","onClick","className","style","color","FillPicker","options","currentOption","onClickOption","SET_FILL_OPTION","setFillOption","type","SET_GAME","SET_CELL_COLOR","setCellColor","row","col","SET_FILLING","setFilling","isFilling","SET_CONSTRAINT_COMPLETE","setConstraintComplete","id","connect","state","currentGame","dispatch","ConstraintsWidget","constraints","extraClasses","container","constraintGroup","i","group","constraint","j","count","withExtraClasses","Widget","Wrapper","props","game","rowsConstraints","colsConstraints","GridWidget","grid","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","cells","rowIndex","cell","createArray","length","creator","array","createCell","createGrid","height","width","createMatrix","getRow","index","getCol","checkConstraints","getState","_checkConstraints","reverse","cellIndex","constraintIndex","checkCells","every","reduce","a","b","clickFillCell","glideFillCell","GameWidget","RowConstraintsContainer","ColConstraintsContainer","GridContainer","FillPickerContainer","setCompleted","reducers","colors","setColor","clone","obj","JSON","parse","stringify","store","createStore","combineReducers","action","applyMiddleware","logger","thunk","gold","black","lightGrey","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ec281d4.chunk.js","sourcesContent":["import Color from \"./Color\";\n\nexport const EMPTY: Color = \"EMPTY\";\n\nexport const EMPTY_OPTION = {\n\tvalue: EMPTY,\n\tcompleted: false\n};\n\nexport type EmptyOption = typeof EMPTY_OPTION;\n\nexport interface ColorOption {\n\tvalue: Color;\n\tcompleted: boolean;\n}\n\ntype FillOption = EmptyOption | ColorOption;\n\nexport default FillOption;\n","import React from \"react\";\n\nconst X = ({ size = 32, padding = 10 }) => {\n\treturn (\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\tviewBox={`0 0 ${size} ${size}`}\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"1\"\n\t\t\tstrokeLinecap={\"round\"}\n\t\t>\n\t\t\t<line\n\t\t\t\tx1={`${padding}`}\n\t\t\t\ty1={`${size - padding}`}\n\t\t\t\tx2={`${size - padding}`}\n\t\t\t\ty2={`${padding}`}\n\t\t\t/>\n\t\t\t<line\n\t\t\t\tx1={`${size - padding}`}\n\t\t\t\ty1={`${size - padding}`}\n\t\t\t\tx2={`${padding}`}\n\t\t\t\ty2={`${padding}`}\n\t\t\t/>\n\t\t</svg>\n\t);\n};\n\nexport default X;\n","import React from \"react\";\n\nconst O = ({ size = 32, padding = 9 }) => {\n\treturn (\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={`0 0 ${size} ${size}`}>\n\t\t\t<circle\n\t\t\t\tcx={size / 2}\n\t\t\t\tcy={size / 2}\n\t\t\t\tr={size / 2 - padding}\n\t\t\t\tfill=\"currentColor\"\n\t\t\t/>\n\t\t</svg>\n\t);\n};\n\nexport default O;\n","export default function classes(\n\t...args: (undefined | string | { [key: string]: boolean })[]\n) {\n\tconst classes: string[] = [];\n\tfor (const arg of args) {\n\t\tif (arg === undefined) {\n\t\t\tcontinue;\n\t\t} else if (typeof arg === \"string\") {\n\t\t\tclasses.push(arg);\n\t\t} else {\n\t\t\tconst cls = Object.entries(arg)\n\t\t\t\t.filter(([_, value]) => value)\n\t\t\t\t.map(([key, _]) => key);\n\t\t\tclasses.push(...cls);\n\t\t}\n\t}\n\treturn classes.join(\" \");\n}\n","import React from \"react\";\nimport FillOption, { EMPTY } from \"../types/FillOption\";\nimport \"./styles/fill-picker.css\";\nimport X from \"./X\";\nimport O from \"./O\";\nimport classes from \"./classes\";\n\ninterface FillPickerProps {\n\toptions: FillOption[];\n\tonClickOption: (option: FillOption) => void;\n\tcurrentOption: FillOption;\n}\n\ninterface FillPickerOptionProps {\n\toption: FillOption;\n\tactive: boolean;\n\tonClick: () => void;\n}\n\nconst FillPickerOption: React.FC<FillPickerOptionProps> = ({\n\toption,\n\tactive,\n\tonClick\n}) => {\n\tconst { value, completed } = option;\n\n\treturn (\n\t\t<div className={`color-button`} onClick={onClick}>\n\t\t\t<div\n\t\t\t\tclassName={classes(\"color-fill\", {\n\t\t\t\t\t\"color-fill-active\": active,\n\t\t\t\t\tcompleted\n\t\t\t\t})}\n\t\t\t\tstyle={{ color: `var(--${value})` }}\n\t\t\t>\n\t\t\t\t{value === EMPTY ? <X padding={5} /> : <O padding={5} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst FillPicker: React.FC<FillPickerProps> = ({\n\toptions,\n\tcurrentOption,\n\tonClickOption\n}) => {\n\treturn (\n\t\t<div className={\"color-picker\"}>\n\t\t\t{options.map((option) => {\n\t\t\t\tconst { value } = option;\n\t\t\t\tconst active = value === currentOption.value;\n\t\t\t\tconst onClick = () => onClickOption(option);\n\t\t\t\treturn (\n\t\t\t\t\t<FillPickerOption\n\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\toption={option}\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default FillPicker;\n","import FillOption from \"../../types/FillOption\";\nimport Game from \"../../types/Game\";\nimport Color from \"../../types/Color\";\n\nexport const SET_FILL_OPTION = \"SET_FILL_OPTION\";\nexport const setFillOption = (option: FillOption) => ({\n\ttype: SET_FILL_OPTION,\n\toption\n});\n\nexport const SET_GAME = \"SET_GAME\";\nexport const setGame = (game: Game) => ({\n\ttype: SET_GAME,\n\tgame\n});\n\nexport const SET_CELL_COLOR = \"SET_CELL_COLOR\";\nexport const setCellColor = (row: number, col: number, color: Color) => ({\n\ttype: SET_CELL_COLOR,\n\trow,\n\tcol,\n\tcolor\n});\n\nexport const SET_FILLING = \"SET_FILLING\";\nexport const setFilling = (isFilling: boolean) => ({\n\ttype: SET_FILLING,\n\tisFilling\n});\n\nexport const SET_CONSTRAINT_COMPLETE = \"SET_CONSTRAINT_COMPLETE\";\nexport const setConstraintComplete = (id: number, completed: boolean) => ({\n\ttype: SET_CONSTRAINT_COMPLETE,\n\tid,\n\tcompleted\n});\n","import { connect } from \"react-redux\";\nimport FillPicker from \"./FillPicker\";\nimport FillOption from \"../types/FillOption\";\nimport { setFillOption } from \"../redux/currentGame/actions\";\nimport State from \"../redux/State\";\n\nconst mapStateToProps = (state: State) => {\n\tconst { currentOption, options } = state.currentGame;\n\treturn {\n\t\tcurrentOption: currentOption!!,\n\t\toptions: options!!\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonClickOption: (option: FillOption) => dispatch(setFillOption(option))\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FillPicker);\n","import React from \"react\";\nimport Constraint from \"../types/Constraint\";\nimport classes from \"./classes\";\nimport \"./styles/constraints-widget.css\";\n\nexport interface ConstraintsProps {\n\tconstraints: Constraint[][];\n\textraClasses?: {\n\t\tcontainer: string;\n\t\tgroup: string;\n\t\tconstraint: string;\n\t};\n}\n\nconst ConstraintsWidget: React.FC<ConstraintsProps> = ({\n\tconstraints,\n\textraClasses\n}) => {\n\treturn (\n\t\t<div className={extraClasses?.container}>\n\t\t\t{constraints.map((constraintGroup, i) => (\n\t\t\t\t<div\n\t\t\t\t\tkey={`constraint-group-${i}`}\n\t\t\t\t\tclassName={extraClasses?.group}\n\t\t\t\t>\n\t\t\t\t\t{constraintGroup.map((constraint, j) => {\n\t\t\t\t\t\tconst { color, count, completed } = constraint;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={`constraint-${i}-${j}`}\n\t\t\t\t\t\t\t\tclassName={classes(\n\t\t\t\t\t\t\t\t\textraClasses?.constraint,\n\t\t\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcompleted\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{count}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default ConstraintsWidget;\n","import React from \"react\";\n\ntype ExtraClasses = any;\n\ninterface WithExtraClassesProps {\n\textraClasses?: any;\n}\n\nexport default function withExtraClasses<P>(extraClasses: ExtraClasses) {\n\treturn function (Widget: React.ComponentType<P & WithExtraClassesProps>) {\n\t\tfunction Wrapper(props: P) {\n\t\t\treturn <Widget extraClasses={extraClasses} {...props} />;\n\t\t}\n\t\tWrapper.Widget = Widget;\n\t\treturn Wrapper;\n\t};\n}\n","import { connect } from \"react-redux\";\nimport State from \"../redux/State\";\nimport \"./styles/row-constraints-widget.css\";\nimport ConstraintsWidget, { ConstraintsProps } from \"./ConstraintsWidget\";\nimport withExtraClasses from \"./WithExtraClasses\";\n\nconst mapStateToProps = (state: State) => {\n\tconst { rowsConstraints } = state.currentGame.game!!;\n\treturn {\n\t\tconstraints: rowsConstraints\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {};\n};\n\nconst extraClasses = {\n\tcontainer: \"row-constraints\",\n\tgroup: \"row-constraint-group\",\n\tconstraint: \"row-constraint\"\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(withExtraClasses<ConstraintsProps>(extraClasses)(ConstraintsWidget));\n","import { connect } from \"react-redux\";\nimport State from \"../redux/State\";\nimport \"./styles/col-constraints-widget.css\";\nimport ConstraintsWidget, { ConstraintsProps } from \"./ConstraintsWidget\";\nimport withExtraClasses from \"./WithExtraClasses\";\n\nconst mapStateToProps = (state: State) => {\n\tconst { colsConstraints } = state.currentGame.game!!;\n\treturn {\n\t\tconstraints: colsConstraints\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {};\n};\n\nconst extraClasses = {\n\tcontainer: \"col-constraints\",\n\tgroup: \"col-constraint-group\",\n\tconstraint: \"col-constraint\"\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(withExtraClasses<ConstraintsProps>(extraClasses)(ConstraintsWidget));\n","import Grid from \"../types/Grid\";\nimport React from \"react\";\nimport \"./styles/grid-widget.css\";\nimport Cell from \"../types/Cell\";\nimport { EMPTY } from \"../types/FillOption\";\nimport X from \"./X\";\nimport classes from \"./classes\";\n\ninterface GridProps {\n\tgrid: Grid;\n\tonMouseDown: (cell: Cell) => void;\n\tonMouseUp: () => void;\n\tonMouseEnter: (cell: Cell) => void;\n\tonMouseLeave: () => void;\n}\n\nconst GridWidget: React.FC<GridProps> = ({\n\tgrid,\n\tonMouseDown,\n\tonMouseUp,\n\tonMouseEnter,\n\tonMouseLeave\n}) => {\n\treturn (\n\t\t<div className={\"grid\"} onMouseLeave={onMouseLeave}>\n\t\t\t{grid.cells.map((row, rowIndex) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={`row-${rowIndex}`} className={\"row\"}>\n\t\t\t\t\t\t{row.map((cell) => {\n\t\t\t\t\t\t\tconst { row, col, color } = cell;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={`cell-${row}-${col}`}\n\t\t\t\t\t\t\t\t\tclassName={classes(\"cell\", color)}\n\t\t\t\t\t\t\t\t\tonMouseDown={() => onMouseDown(cell)}\n\t\t\t\t\t\t\t\t\tonMouseUp={() => onMouseUp()}\n\t\t\t\t\t\t\t\t\tonMouseEnter={() => onMouseEnter(cell)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{color === EMPTY ? <X /> : null}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default GridWidget;\n","import Constraint from \"../types/Constraint\";\nimport Game from \"../types/Game\";\nimport Grid from \"../types/Grid\";\nimport Color from \"../types/Color\";\n\nlet id = 0;\nexport function constraint(color: string) {\n\treturn function (count: number): Constraint {\n\t\treturn {\n\t\t\tid: id++,\n\t\t\tcolor,\n\t\t\tcount,\n\t\t\tcompleted: false\n\t\t};\n\t};\n}\n\nfunction createArray<T>(length: number, creator: (index: number) => T): T[] {\n\tconst array: T[] = [];\n\tfor (let i = 0; i < length; i++) {\n\t\tarray.push(creator(i));\n\t}\n\treturn array;\n}\n\nfunction createMatrix<T>(\n\theight: number,\n\twidth: number,\n\tcreator: (row: number, col: number) => T\n): T[][] {\n\treturn createArray(height, (row) =>\n\t\tcreateArray(width, (col) => creator(row, col))\n\t);\n}\n\nfunction createCell(row, col) {\n\treturn {\n\t\trow,\n\t\tcol,\n\t\tcolor: undefined\n\t};\n}\n\nexport function createGrid(height: number, width: number): Grid {\n\tconst cells = createMatrix(height, width, createCell);\n\treturn { cells };\n}\n\nexport function createGame(\n\trowsConstraints: Constraint[][],\n\tcolsConstraints: Constraint[][],\n\tcolors: Color[]\n): Game {\n\treturn {\n\t\tgrid: createGrid(rowsConstraints.length, colsConstraints.length),\n\t\trowsConstraints,\n\t\tcolsConstraints,\n\t\tcolors\n\t};\n}\n\nexport function getRow(grid: Grid, index: number) {\n\treturn grid.cells[index];\n}\n\nexport function getCol(grid: Grid, index: number) {\n\treturn grid.cells.map((row) => row[index]);\n}\n","import { setCellColor, setConstraintComplete } from \"./actions\";\nimport Constraint from \"../../types/Constraint\";\nimport Cell from \"../../types/Cell\";\nimport { EMPTY } from \"../../types/FillOption\";\nimport { getCol, getRow } from \"../../puzzles/common\";\n\nexport function glideFillCell(row: number, col: number) {\n\treturn function (dispatch, getState) {\n\t\tconst isFilling = getState().currentGame.isFilling;\n\t\tconst color = getState().currentGame.currentOption.value;\n\t\tif (isFilling) {\n\t\t\tdispatch(setCellColor(row, col, color));\n\t\t\tdispatch(checkConstraints());\n\t\t\tdispatch(checkCells(row, col));\n\t\t}\n\t};\n}\n\nexport function clickFillCell(row: number, col: number) {\n\treturn function (dispatch, getState) {\n\t\tconst color = getState().currentGame.currentOption.value;\n\t\tdispatch(setCellColor(row, col, color));\n\t\tdispatch(checkConstraints());\n\t\tdispatch(checkCells(row, col));\n\t};\n}\n\nexport function checkConstraints() {\n\treturn function (dispatch, getState) {\n\t\tconst { grid, rowsConstraints, colsConstraints } =\n\t\t\tgetState().currentGame!!.game!!;\n\n\t\tfor (let row = 0; row < rowsConstraints.length; row++) {\n\t\t\t_checkConstraints(\n\t\t\t\trowsConstraints[row],\n\t\t\t\tgetRow(grid, row),\n\t\t\t\tdispatch\n\t\t\t);\n\t\t\t_checkConstraints(\n\t\t\t\treverse(rowsConstraints[row]),\n\t\t\t\treverse(getRow(grid, row)),\n\t\t\t\tdispatch\n\t\t\t);\n\t\t}\n\n\t\tfor (let col = 0; col < colsConstraints.length; col++) {\n\t\t\t_checkConstraints(\n\t\t\t\tcolsConstraints[col],\n\t\t\t\tgetCol(grid, col),\n\t\t\t\tdispatch\n\t\t\t);\n\t\t\t_checkConstraints(\n\t\t\t\treverse(colsConstraints[col]),\n\t\t\t\treverse(getCol(grid, col)),\n\t\t\t\tdispatch\n\t\t\t);\n\t\t}\n\t};\n}\n\nfunction _checkConstraints(constraints: Constraint[], cells: Cell[], dispatch) {\n\tlet cellIndex = 0;\n\tlet count = 0;\n\tfor (\n\t\tlet constraintIndex = 0;\n\t\tconstraintIndex < constraints.length;\n\t\tconstraintIndex++\n\t) {\n\t\twhile (cellIndex < cells.length && cells[cellIndex].color === EMPTY) {\n\t\t\tcellIndex++;\n\t\t}\n\n\t\twhile (\n\t\t\tcellIndex < cells.length &&\n\t\t\tcells[cellIndex].color === constraints[constraintIndex].color\n\t\t) {\n\t\t\tcellIndex++;\n\t\t\tcount++;\n\t\t}\n\n\t\tif (count === constraints[constraintIndex].count) {\n\t\t\tdispatch(\n\t\t\t\tsetConstraintComplete(constraints[constraintIndex].id, true)\n\t\t\t);\n\t\t\tcount = 0;\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tsetConstraintComplete(constraints[constraintIndex].id, false)\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction checkCells(row: number, col: number) {\n\treturn function (dispatch, getState) {\n\t\tconst { grid, rowsConstraints, colsConstraints } =\n\t\t\tgetState().currentGame!!.game!!;\n\n\t\tif (rowsConstraints[row].every(({ completed }) => completed)) {\n\t\t\tfor (const cell of getRow(grid, row)) {\n\t\t\t\tif (cell.color === undefined) {\n\t\t\t\t\tdispatch(setCellColor(cell.row, cell.col, EMPTY));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (colsConstraints[col].every(({ completed }) => completed)) {\n\t\t\tfor (const cell of getCol(grid, col)) {\n\t\t\t\tif (cell.color === undefined) {\n\t\t\t\t\tdispatch(setCellColor(cell.row, cell.col, EMPTY));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tgetRow(grid, row).filter(\n\t\t\t\t({ color }) => color !== undefined && color !== EMPTY\n\t\t\t).length ===\n\t\t\trowsConstraints[row]\n\t\t\t\t.map(({ count }) => count)\n\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t) {\n\t\t\tfor (const cell of getRow(grid, row)) {\n\t\t\t\tif (cell.color === undefined) {\n\t\t\t\t\tdispatch(setCellColor(cell.row, cell.col, EMPTY));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(const constraint of rowsConstraints[row]) {\n\t\t\t\tdispatch(setConstraintComplete(constraint.id, true));\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tgetCol(grid, col).filter(\n\t\t\t\t({ color }) => color !== undefined && color !== EMPTY\n\t\t\t).length ===\n\t\t\tcolsConstraints[col]\n\t\t\t\t.map(({ count }) => count)\n\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t) {\n\t\t\tfor (const cell of getCol(grid, col)) {\n\t\t\t\tif (cell.color === undefined) {\n\t\t\t\t\tdispatch(setCellColor(cell.row, cell.col, EMPTY));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(const constraint of colsConstraints[col]) {\n\t\t\t\tdispatch(setConstraintComplete(constraint.id, true));\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction reverse(array: any[]) {\n\treturn [...array].reverse();\n}\n","import { connect } from \"react-redux\";\nimport { setFilling } from \"../redux/currentGame/actions\";\nimport State from \"../redux/State\";\nimport Cell from \"../types/Cell\";\nimport GridWidget from \"./GridWidget\";\nimport { clickFillCell, glideFillCell } from \"../redux/currentGame/thunks\";\n\nconst mapStateToProps = (state: State) => {\n\tconst { grid } = state.currentGame.game!!;\n\treturn {\n\t\tgrid\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonMouseDown: ({ row, col }: Cell) => {\n\t\t\tdispatch(setFilling(true));\n\t\t\tdispatch(clickFillCell(row, col));\n\t\t},\n\t\tonMouseUp: () => {\n\t\t\tdispatch(setFilling(false));\n\t\t},\n\t\tonMouseEnter: ({ row, col }: Cell) => {\n\t\t\tdispatch(glideFillCell(row, col));\n\t\t},\n\t\tonMouseLeave: () => {\n\t\t\tdispatch(setFilling(false));\n\t\t}\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GridWidget);\n","import React from \"react\";\nimport \"./styles/game-widget.css\";\nimport FillPickerContainer from \"./FillPickerContainer\";\nimport RowConstraintsContainer from \"./RowConstraintsContainer\";\nimport ColConstraintsContainer from \"./ColConstraintsContainer\";\nimport GridContainer from \"./GridContainer\";\n\ninterface GameProps {}\n\nconst GameWidget: React.FC<GameProps> = () => {\n\treturn (\n\t\t<div className={\"game\"}>\n\t\t\t<div className={\"board\"}>\n\t\t\t\t<div className={\"spacer-row-constraints\"}>\n\t\t\t\t\t<div className={\"spacer\"} />\n\t\t\t\t\t<RowConstraintsContainer />\n\t\t\t\t</div>\n\t\t\t\t<div className={\"col-constraints-grid\"}>\n\t\t\t\t\t<ColConstraintsContainer />\n\t\t\t\t\t<GridContainer />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<FillPickerContainer />\n\t\t</div>\n\t);\n};\n\nexport default GameWidget;\n","import Color from \"./Color\";\n\nexport default interface Constraint {\n\tid: number;\n\tcolor: Color;\n\tcount: number;\n\tcompleted: boolean;\n}\n\nexport function setCompleted(constraint: Constraint, completed: boolean) {\n\tconstraint.completed = completed;\n}\n","import {\n\tSET_CELL_COLOR,\n\tSET_CONSTRAINT_COMPLETE,\n\tSET_FILL_OPTION,\n\tSET_FILLING,\n\tSET_GAME\n} from \"./actions\";\nimport CurrentGameState from \"./CurrentGameState\";\nimport FillOption, { EMPTY_OPTION } from \"../../types/FillOption\";\nimport Game from \"../../types/Game\";\nimport { setColor } from \"../../types/Cell\";\nimport Color from \"../../types/Color\";\nimport { setCompleted } from \"../../types/Constraint\";\n\ninterface Action {\n\tid: number;\n\tgame: Game;\n\toption: FillOption;\n\ttype: string;\n\tisFilling: boolean;\n\trow: number;\n\tcol: number;\n\tcolor: Color;\n}\n\nfunction setFilling(state: CurrentGameState, { isFilling }: Action): void {\n\tstate.isFilling = isFilling;\n}\n\nfunction setGame(state: CurrentGameState, { game }: Action): void {\n\tstate.game = game;\n\tstate.options = [\n\t\tEMPTY_OPTION,\n\t\t...game.colors.map((value) => ({ value, completed: false }))\n\t];\n}\n\nfunction setFillOption(state: CurrentGameState, { option }: Action): void {\n\tstate.currentOption = option;\n}\n\nfunction setCellColor(\n\t{ game, currentOption }: CurrentGameState,\n\t{ row, col, color }: Action\n): void {\n\tconst { grid } = game!!;\n\tconst { cells } = grid;\n\tsetColor(cells[row][col], color);\n}\n\nfunction setConstraintComplete(\n\t{ game }: CurrentGameState,\n\t{ id, completed }\n): void {\n\tconst { rowsConstraints, colsConstraints } = game!!;\n\tfor (const constraints of [...rowsConstraints, ...colsConstraints]) {\n\t\tfor (const constraint of constraints) {\n\t\t\tif (constraint.id === id) {\n\t\t\t\tsetCompleted(constraint, completed);\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst reducers = {\n\t[SET_FILLING]: setFilling,\n\t[SET_GAME]: setGame,\n\t[SET_FILL_OPTION]: setFillOption,\n\t[SET_CELL_COLOR]: setCellColor,\n\t[SET_CONSTRAINT_COMPLETE]: setConstraintComplete\n};\n\nexport default function reducer(\n\tstate: CurrentGameState = { isFilling: false },\n\taction: Action\n): CurrentGameState {\n\tif (action.type in reducers) {\n\t\treducers[action.type](state, action);\n\t\treturn clone(state);\n\t} else {\n\t\treturn state;\n\t}\n}\n\nfunction clone<T>(obj: T): T {\n\treturn JSON.parse(JSON.stringify(obj));\n}\n","import Color from \"./Color\";\n\nexport default interface Cell {\n\tcolor?: Color;\n\trow: number;\n\tcol: number;\n}\n\nexport function setColor(cell: Cell, color: Color) {\n\tcell.color = color;\n}\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./currentGame/reducer\";\nimport State from \"./State\";\n\nconst store = createStore<State, any, any, any>(\n\tcombineReducers({\n\t\tcurrentGame: reducer\n\t}),\n\tapplyMiddleware(logger, thunk)\n);\n\nexport default store;\n","import { constraint } from \"./common\";\n\nexport const orange = constraint(\"orange\");\nexport const yellow = constraint(\"yellow\");\nexport const blue = constraint(\"blue\");\nexport const lightBlue = constraint(\"lightBlue\");\nexport const darkBlue = constraint(\"darkBlue\");\nexport const burgundy = constraint(\"burgundy\");\nexport const grey = constraint(\"grey\");\nexport const brown = constraint(\"brown\");\nexport const green = constraint(\"green\");\nexport const mustard = constraint(\"mustard\");\nexport const cherry = constraint(\"cherry\");\nexport const pink = constraint(\"pink\");\nexport const gold = constraint(\"gold\");\nexport const black = constraint(\"black\");\nexport const lightGrey = constraint(\"lightGrey\");\n","import { lightGrey, gold, black } from \"./colors\";\nimport { createGame } from \"./common\";\n\nconst rowsConstraints = [\n\t[lightGrey(2), lightGrey(2)],\n\t[gold(1), lightGrey(2), lightGrey(2), gold(1)],\n\t[gold(2), lightGrey(2), lightGrey(2), gold(2)],\n\t[gold(1), lightGrey(6), gold(1)],\n\t[gold(1), lightGrey(4), gold(1)],\n\t[gold(1), black(1),  lightGrey(2), black(1), gold(1)],\n\t[gold(2), lightGrey(2), gold(2)],\n\t[gold(2), lightGrey(2), gold(2)],\n\t[gold(1), black(2), gold(1)],\n\t[lightGrey(2), gold(1), black(2), gold(1), lightGrey(2) ],\n];\n\nconst colsConstraints = [\n\t[lightGrey(1), gold(2)],\n\t[lightGrey(2), gold(2), lightGrey(1)],\n\t[lightGrey(3), gold(4), lightGrey(1)],\n\t[lightGrey(3), black(1), gold(4)],\n\t[lightGrey(5), black(2)],\n\t[lightGrey(5), black(2)],\n\t[lightGrey(3), black(1), gold(4)],\n\t[lightGrey(3), gold(4), lightGrey(1)],\n\t[lightGrey(2), gold(2), lightGrey(1)],\n\t[lightGrey(1), gold(2)],\n];\n\nconst game = createGame(rowsConstraints, colsConstraints, [\n\t\"lightGrey\",\n\t\"gold\",\n\t\"black\"\n]);\n\nexport default game;\n","import React from \"react\";\nimport \"./App.css\";\nimport GameWidget from \"./components/GameWidget\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { setFillOption, setGame } from \"./redux/currentGame/actions\";\nimport { EMPTY_OPTION } from \"./types/FillOption\";\nimport game from \"./puzzles/september26\";\n\nstore.dispatch(setGame(game));\nstore.dispatch(setFillOption(EMPTY_OPTION));\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<div className={\"wrapper\"}>\n\t\t\t\t<GameWidget />\n\t\t\t</div>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport(\"web-vitals\").then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}